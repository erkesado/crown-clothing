{"version":3,"file":"static/js/842.16e9f2d6.chunk.js","mappings":"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","sources":["components/button/button.component.tsx","components/button/button.styles.tsx","components/form-input/form-input.styles.tsx","components/form-input/form-input.component.tsx","components/sign-in-form/sign-in-form.styles.tsx","components/sign-in-form/sign-in-form.component.tsx","components/sign-up-form/sign-up-form.component.tsx","routes/authentication/authentication.styles.tsx","routes/authentication/authentication.component.tsx"],"sourcesContent":["import { FC, ButtonHTMLAttributes } from \"react\";\nimport {\n  BaseButton,\n  GoogleSignInButton,\n  InvertedButton,\n} from \"./button.styles\";\n\nexport enum BUTTON_TYPE_CLASSES {\n  base = \"base\",\n  google = \"google-sign-in\",\n  inverted = \"inverted\",\n};\n\nconst getButton = (buttonType = BUTTON_TYPE_CLASSES.base): typeof BaseButton =>\n  ({\n    [BUTTON_TYPE_CLASSES.base]: BaseButton,\n    [BUTTON_TYPE_CLASSES.google]: GoogleSignInButton,\n    [BUTTON_TYPE_CLASSES.inverted]: InvertedButton,\n  }[buttonType]);\n\nexport type ButtonProps = {\n  buttonType?: BUTTON_TYPE_CLASSES;\n  isLoading?: boolean;\n} & ButtonHTMLAttributes<HTMLButtonElement>;\n\nconst Button: FC<ButtonProps> = ({\n  children,\n  buttonType,\n  isLoading,\n  ...otherProps\n}) => {\n  const CustomButton = getButton(buttonType);\n  return <CustomButton disabled={isLoading} {...otherProps}>\n    {children}\n  </CustomButton>;\n};\n\nexport default Button;\n","import styled from \"styled-components\";\n\nexport const BaseButton = styled.button`\n  min-width: 165px;\n  width: auto;\n  height: 50px;\n  letter-spacing: 0.5px;\n  line-height: 50px;\n  padding: 0 35px;\n  font-size: 15px;\n  background-color: black;\n  color: white;\n  text-transform: uppercase;\n  font-family: \"Open Sans Condensed\";\n  border: none;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n\n  &:hover {\n    background-color: white;\n    color: black;\n    border: 1px solid black;\n  }\n`;\n\nexport const GoogleSignInButton = styled(BaseButton)`\n  background-color: #4285f4;\n  color: white;\n\n  &:hover {\n    background-color: #357ae8;\n    border: none;\n  }\n`;\n\nexport const InvertedButton = styled(BaseButton)`\n  background-color: white;\n  color: black;\n  border: 1px solid black;\n\n  &:hover {\n    background-color: black;\n    color: white;\n    border: none;\n  }\n`;\n","import styled, { css } from \"styled-components\";\n\nconst mainColor = \"black\";\nconst subColor = \"grey\";\n\nconst shrinkLabelStyles = css`\n  top: -14px;\n  font-size: 12px;\n  color: ${mainColor};\n`;\n\nexport const Group = styled.div`\n  position: relative;\n  margin: 45px 0;\n\n  input[type=\"password\"] {\n    letter-spacing: 0.3em;\n  }\n`;\n\ntype FormInputLabelProps = {\n  shrink?: boolean; \n}\n\nexport const FormInputLabel = styled.label<FormInputLabelProps>`\n  color: ${subColor};\n  font-size: 16px;\n  font-weight: normal;\n  position: absolute;\n  pointer-events: none;\n  left: 5px;\n  top: 10px;\n  transition: 300ms ease all;\n\n  ${({ shrink }) => shrink && shrinkLabelStyles};\n`;\n\nexport const Input = styled.input`\n  background: none;\n  background-color: white;\n  color: ${subColor};\n  font-size: 18px;\n  padding: 10px 10px 10px 5px;\n  display: block;\n  width: 100%;\n  border: none;\n  border-radius: 0;\n  border-bottom: 1px solid ${subColor};\n  margin: 25px 0;\n\n  &:focus {\n    outline: none;\n  }\n\n  &:focus ~ ${FormInputLabel} {\n    ${shrinkLabelStyles}\n  }\n`;\n","import { InputHTMLAttributes, FC } from \"react\";\nimport { Group, FormInputLabel, Input } from \"./form-input.styles\";\n\ntype FormInputProps = { label: string; } & InputHTMLAttributes<HTMLInputElement>;\n\nconst FormInput: FC<FormInputProps> = ({ label, ...otherProps }) => {\n  return (\n    <Group>\n      <Input {...otherProps} />\n      {label && (\n        <FormInputLabel shrink={Boolean(\n            otherProps.value &&\n            typeof otherProps.value === 'string' &&\n            otherProps.value.length\n          )}\n        >\n          {label}\n        </FormInputLabel>\n      )}\n    </Group>\n  );\n};\n\nexport default FormInput;\n","import styled from \"styled-components\";\n\nexport const SigninButtonsContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n\n  button {\n    margin: 0 0.5rem 0.5rem 0;\n  }\n`;\n"," import { useState, FormEvent, ChangeEvent } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport FormInput from \"../form-input/form-input.component\";\nimport Button, { BUTTON_TYPE_CLASSES } from \"../button/button.component\";\n\nimport { SigninButtonsContainer } from \"./sign-in-form.styles\";\n\nimport { googleSignInStart, emailSignInStart } from \"../../store/user/user.action\"\n\nconst defaultFormFields = {\n  email: \"\",\n  password: \"\",\n};\n\nconst SignInForm = () => {\n  const [formFields, setFormFields] = useState(defaultFormFields);\n  const { email, password } = formFields;\n  const dispatch = useDispatch();\n\n  const resetFormFields = () => {\n    setFormFields(defaultFormFields);\n  };\n\n  const handleEmailPasswordSignIn = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    try {\n      dispatch(emailSignInStart(email, password));\n      resetFormFields();\n    } catch (error) {\n      console.log('user sign in failed' , error);\n    }\n  };\n\n  const handleGoogleSignIn = () => {\n    dispatch(googleSignInStart())\n  };\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n    setFormFields({ ...formFields, [name]: value });\n  };\n\n  return (\n    <div>\n      <h2>Already have an account?</h2>\n      <span>Sign in with your email and password</span>\n      <form onSubmit={handleEmailPasswordSignIn}>\n        <FormInput\n          label=\"Email\"\n          type=\"email\"\n          required\n          onChange={handleChange}\n          name=\"email\"\n          value={email}\n        />\n\n        <FormInput\n          label=\"Password\"\n          type=\"password\"\n          required\n          onChange={handleChange}\n          name=\"password\"\n          value={password}\n        />\n\n        <SigninButtonsContainer>\n          <Button type=\"submit\">Sign In</Button>\n          <Button\n            type=\"button\"\n            buttonType={BUTTON_TYPE_CLASSES.google}\n            onClick={handleGoogleSignIn}\n          >\n            Sign In With Google\n          </Button>\n        </SigninButtonsContainer>\n      </form>\n    </div>\n  );\n};\n\nexport default SignInForm;\n","import { useState, FormEvent, ChangeEvent } from \"react\";\nimport { Auth, AuthError, AuthErrorCodes } from \"firebase/auth\";\nimport { useDispatch } from \"react-redux\";\n\nimport FormInput from \"../form-input/form-input.component\";\nimport Button from \"../button/button.component\";\n\nimport { signUpStart } from \"../../store/user/user.action\";\n\nconst defaultFormFields = {\n  displayName: \"\",\n  email: \"\",\n  password: \"\",\n  confirmPassword: \"\",\n};\n\nconst SignUpForm = () => {\n  const [formFields, setFormFields] = useState(defaultFormFields);\n  const { displayName, email, password, confirmPassword } = formFields;\n  const dispatch = useDispatch();\n\n  const resetFormFields = () => {\n    setFormFields(defaultFormFields);\n  };\n\n  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    // Check password match\n    if (password !== confirmPassword) {\n      alert(\"Passwords do not match!\");\n      return;\n    }\n\n    try {\n      dispatch(signUpStart(email, password, displayName));\n      resetFormFields();\n    } catch (error) {\n      if ((error as AuthError).code === AuthErrorCodes.EMAIL_EXISTS) {\n        alert(\"Cannot create user for the email already in use\");\n      } else {\n        console.log(error);\n      }\n    }\n  };\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n    setFormFields({ ...formFields, [name]: value });\n  };\n\n  return (\n    <div>\n      <h2>Don't have an account?</h2>\n      <span>Sign up with your email and password</span>\n      <form onSubmit={handleSubmit}>\n        <FormInput\n          label=\"Display Name\"\n          type=\"text\"\n          required\n          onChange={handleChange}\n          name=\"displayName\"\n          value={displayName}\n        />\n\n        <FormInput\n          label=\"Email\"\n          type=\"email\"\n          required\n          onChange={handleChange}\n          name=\"email\"\n          value={email}\n        />\n\n        <FormInput\n          label=\"Password\"\n          type=\"password\"\n          required\n          onChange={handleChange}\n          name=\"password\"\n          value={password}\n        />\n\n        <FormInput\n          label=\"Confirm Password\"\n          type=\"password\"\n          required\n          onChange={handleChange}\n          name=\"confirmPassword\"\n          value={confirmPassword}\n        />\n\n        <Button type=\"submit\">Sign Up</Button>\n      </form>\n    </div>\n  );\n};\n\nexport default SignUpForm;\n","import styled from \"styled-components\";\n\nexport const AuthContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 0 10%;\n\n  & > div {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    margin-bottom: 3rem;\n\n    h2 {\n      margin: 10px 0;\n    }\n\n    @media (min-width: 768px) {\n      width: 45%;\n      margin-bottom: 0;\n    }\n  }\n\n  @media (min-width: 768px) {\n    flex-direction: row;\n  }\n`;\n","import SignInForm from \"../../components/sign-in-form/sign-in-form.component\";\nimport SignUpForm from \"../../components/sign-up-form/sign-up-form.component\";\n\nimport { AuthContainer } from \"./authentication.styles\";\n\nconst Authentication = () => {\n  return (\n    <AuthContainer>\n      <SignInForm />\n      <SignUpForm />\n    </AuthContainer>\n  );\n};\n\nexport default Authentication;\n"],"names":["BUTTON_TYPE_CLASSES","_ref","children","buttonType","isLoading","otherProps","CustomButton","arguments","length","undefined","base","BaseButton","google","GoogleSignInButton","inverted","InvertedButton","getButton","_jsx","disabled","styled","button","_templateObject","_taggedTemplateLiteral","_templateObject2","_templateObject3","subColor","shrinkLabelStyles","css","Group","div","FormInputLabel","label","shrink","Input","input","_templateObject4","_jsxs","Boolean","value","SigninButtonsContainer","defaultFormFields","email","password","SignInForm","formFields","setFormFields","useState","dispatch","useDispatch","handleChange","event","name","target","onSubmit","preventDefault","emailSignInStart","error","console","log","FormInput","type","required","onChange","Button","onClick","handleGoogleSignIn","googleSignInStart","displayName","confirmPassword","SignUpForm","async","signUpStart","code","AuthErrorCodes","EMAIL_EXISTS","alert","AuthContainer","Authentication"],"sourceRoot":""}